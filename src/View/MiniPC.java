/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.MiniPCController;
import Model.CPU;
import Model.FileManager;
import Model.Memory;
import Model.MemoryRegister;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author aleja
 */
public class MiniPC extends javax.swing.JFrame {
    // Esta clase representa la GUI del programa que se utiliza para cargar los archivos, leer las instrucciones y ver la informaci칩n de la memoria y los registros
    // Contiene el controlador del CPU, el administrador de archivos, la cantidad de filas de instrucciones que se han generado y la direcci칩n actual que se desplegar치 en la GUI
    
    public MiniPCController controller = new MiniPCController();
    public FileManager fileManager = new FileManager();
    int rowCount = 0;
    int currentAddress = 0;
    
    /**
     * Creates new form NewJFrame
     */
    public MiniPC() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextInstructionBtn1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Pnl_Registros = new javax.swing.JPanel();
        lblAX = new javax.swing.JLabel();
        lblNumberAX = new javax.swing.JLabel();
        lblPC = new javax.swing.JLabel();
        lblNumberPC = new javax.swing.JLabel();
        lblBX = new javax.swing.JLabel();
        lblNumberBX = new javax.swing.JLabel();
        lblAC = new javax.swing.JLabel();
        lblNumberAC = new javax.swing.JLabel();
        lblCX = new javax.swing.JLabel();
        lblNumberCX = new javax.swing.JLabel();
        lblDX = new javax.swing.JLabel();
        lblNumberDX = new javax.swing.JLabel();
        lblIR = new javax.swing.JLabel();
        lblNumberIR = new javax.swing.JLabel();
        Pnl_Memoria = new javax.swing.JScrollPane();
        tblCode = new javax.swing.JTable();
        Pnl_Menu = new javax.swing.JPanel();
        loadFileBtn = new javax.swing.JButton();
        cleanTableBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nextInstructionBtn = new javax.swing.JButton();
        Lbl_memoria = new javax.swing.JLabel();
        Lbl_registros = new javax.swing.JLabel();

        nextInstructionBtn1.setText("Siguiente instrucci칩n");
        nextInstructionBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextInstructionBtn1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiniPC");

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setPreferredSize(new java.awt.Dimension(650, 450));
        jPanel3.setRequestFocusEnabled(false);

        Pnl_Registros.setBackground(new java.awt.Color(204, 204, 255));

        lblAX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAX.setText("AX:");

        lblNumberAX.setText("0");

        lblPC.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPC.setText("PC: ");

        lblNumberPC.setText("0");

        lblBX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBX.setText("BX:");

        lblNumberBX.setText("0");

        lblAC.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAC.setText("AC:");

        lblNumberAC.setText("0");

        lblCX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCX.setText("CX:");

        lblNumberCX.setText("0");

        lblDX.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDX.setText("DX: ");

        lblNumberDX.setText("0");

        lblIR.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblIR.setText("IR:");

        lblNumberIR.setText(" ");

        javax.swing.GroupLayout Pnl_RegistrosLayout = new javax.swing.GroupLayout(Pnl_Registros);
        Pnl_Registros.setLayout(Pnl_RegistrosLayout);
        Pnl_RegistrosLayout.setHorizontalGroup(
            Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAX)
                    .addComponent(lblPC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNumberAX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNumberPC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(55, 55, 55)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAC)
                    .addComponent(lblBX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumberBX)
                    .addComponent(lblNumberAC))
                .addGap(35, 35, 35)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                        .addComponent(lblIR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblNumberIR, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                        .addComponent(lblCX)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNumberCX)
                        .addGap(32, 32, 32)
                        .addComponent(lblDX)
                        .addGap(18, 18, 18)
                        .addComponent(lblNumberDX)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        Pnl_RegistrosLayout.setVerticalGroup(
            Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_RegistrosLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAX)
                    .addComponent(lblNumberAX)
                    .addComponent(lblBX)
                    .addComponent(lblNumberBX)
                    .addComponent(lblCX)
                    .addComponent(lblNumberCX)
                    .addComponent(lblDX)
                    .addComponent(lblNumberDX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Pnl_RegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPC)
                    .addComponent(lblNumberPC)
                    .addComponent(lblAC)
                    .addComponent(lblNumberAC)
                    .addComponent(lblIR)
                    .addComponent(lblNumberIR))
                .addGap(29, 29, 29))
        );

        Pnl_Memoria.setBackground(new java.awt.Color(204, 204, 255));
        Pnl_Memoria.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Pnl_Memoria.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        Pnl_Memoria.setMaximumSize(new java.awt.Dimension(102, 102));
        Pnl_Memoria.setMinimumSize(new java.awt.Dimension(101, 101));
        Pnl_Memoria.setName(""); // NOI18N

        tblCode.setBackground(new java.awt.Color(204, 204, 255));
        tblCode.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "C칩digo ASM", "C칩digo binario", "Address", "Instruction #"
            }
        ));
        tblCode.setRowHeight(30);
        Pnl_Memoria.setViewportView(tblCode);

        Pnl_Menu.setBackground(new java.awt.Color(204, 204, 255));
        Pnl_Menu.setPreferredSize(new java.awt.Dimension(602, 602));

        loadFileBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        loadFileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/archivo.png"))); // NOI18N
        loadFileBtn.setText("Cargar Archivo");
        loadFileBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        loadFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileBtnActionPerformed(evt);
            }
        });

        cleanTableBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        cleanTableBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/reiniciar.png"))); // NOI18N
        cleanTableBtn.setText("Limpiar");
        cleanTableBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cleanTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanTableBtnActionPerformed(evt);
            }
        });

        exitBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        exitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/salir.png"))); // NOI18N
        exitBtn.setText("Salir");
        exitBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Mini PC");

        nextInstructionBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        nextInstructionBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/siguiente.png"))); // NOI18N
        nextInstructionBtn.setText("Siguiente");
        nextInstructionBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nextInstructionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextInstructionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Pnl_MenuLayout = new javax.swing.GroupLayout(Pnl_Menu);
        Pnl_Menu.setLayout(Pnl_MenuLayout);
        Pnl_MenuLayout.setHorizontalGroup(
            Pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_MenuLayout.createSequentialGroup()
                .addGroup(Pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadFileBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cleanTableBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(Pnl_MenuLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2)
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addComponent(nextInstructionBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        Pnl_MenuLayout.setVerticalGroup(
            Pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pnl_MenuLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel2)
                .addGap(96, 96, 96)
                .addComponent(loadFileBtn)
                .addGap(18, 18, 18)
                .addComponent(nextInstructionBtn)
                .addGap(18, 18, 18)
                .addComponent(cleanTableBtn)
                .addGap(18, 18, 18)
                .addComponent(exitBtn)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        Lbl_memoria.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_memoria.setText("Memoria");
        Lbl_memoria.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Lbl_registros.setBackground(new java.awt.Color(255, 255, 255));
        Lbl_registros.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Lbl_registros.setText("Registros");
        Lbl_registros.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(Pnl_Menu, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Pnl_Memoria, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(233, 233, 233)
                                .addComponent(Lbl_memoria))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(229, 229, 229)
                                .addComponent(Lbl_registros, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(Pnl_Registros, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Pnl_Menu, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Lbl_registros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Pnl_Registros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(Lbl_memoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Pnl_Memoria, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cleanTable(){
        // Este m칠todo limpia toda la tabla de instrucciones por medio de resetear todos los valores que est치n siendo actualmente desplegados
        // Tambi칠n resetea el controlador de CPU actual y el administrador de archivos actual
        // No recibe ning칰n par치metro
        
        for (int i = 0; i < this.getTblCode().getRowCount(); i++) {
                this.getTblCode().setValueAt("", i, 0);
                this.getTblCode().setValueAt("", i, 1);
                this.getTblCode().setValueAt("", i, 2);
                this.getTblCode().setValueAt("", i, 3);
        }
        this.getLblNumberAC().setText("0");
        this.getLblNumberPC().setText("0");
        this.getLblNumberIR().setText(" ");
        this.getLblNumberAX().setText("0");
        this.getLblNumberBX().setText("0");
        this.getLblNumberCX().setText("0");
        this.getLblNumberDX().setText("0");
        this.setRowCount(0);
        this.setCurrentAddress(0);
        this.getController().setCpu(null);
        FileManager newFileManager = new FileManager();
        this.setFileManager(newFileManager);
    }
    
    private void updateTable(ArrayList<MemoryRegister> instructionSet, int row) {   
        // Este m칠todo actualiza la tabla visualmente, es decir actualiza la informaci칩n que est치 siendo desplegada en la GUI
        // Va mostrando paso a paso las instrucciones cargadas en memoria y toda la informaci칩n relevante a estas
        // Recibe como par치metros el set de instrucciones y el valor entero de la fila donde se desplegar치 la instrucci칩n
        
        this.getTblCode().setValueAt(instructionSet.get(row).getAsmInstructionString(), row, 0);
        this.getTblCode().setValueAt(instructionSet.get(row).convertToBinary(), row, 1);
        this.getTblCode().setValueAt(this.getCurrentAddress(), row, 2);
        this.getTblCode().setValueAt(this.getRowCount()+1, row, 3);
        
        this.getLblNumberAX().setText(this.getController().getCpu().getDataRegisters().get(0).getValue()+"");
        this.getLblNumberBX().setText(this.getController().getCpu().getDataRegisters().get(1).getValue()+"");
        this.getLblNumberCX().setText(this.getController().getCpu().getDataRegisters().get(2).getValue()+"");
        this.getLblNumberDX().setText(this.getController().getCpu().getDataRegisters().get(3).getValue()+"");
        
        this.getLblNumberAC().setText(this.getController().getCpu().getAccumulator()+"");
        this.getLblNumberPC().setText(""+this.getCurrentAddress());
        this.getLblNumberIR().setText(this.getFileManager().getInstructions().get(this.getRowCount()).getAsmInstructionString());
        
        
        this.setRowCount(this.getRowCount()+1);
        this.setCurrentAddress(this.getCurrentAddress()+1);
    } 

    public MiniPCController getController() {
        return controller;
    }

    public void setController(MiniPCController controller) {
        this.controller = controller;
    }

    public int getCurrentAddress() {
        return currentAddress;
    }

    public void setCurrentAddress(int currentAddress) {
        this.currentAddress = currentAddress;
    }

    
    
    public int getRowCount() {
        return rowCount;
    }

    public void setRowCount(int rowCount) {
        this.rowCount = rowCount;
    }
    
    
    
    public JTable getTblCode() {
        return tblCode;
    }

    public void setTblCode(JTable tblCode) {
        this.tblCode = tblCode;
    }

    
    
    public JLabel getLblNumberAC() {
        return lblNumberAC;
    }

    public void setLblNumberAC(JLabel lblNumberAC) {
        this.lblNumberAC = lblNumberAC;
    }

    public JLabel getLblNumberAX() {
        return lblNumberAX;
    }

    public void setLblNumberAX(JLabel lblNumberAX) {
        this.lblNumberAX = lblNumberAX;
    }

    public JLabel getLblNumberBX() {
        return lblNumberBX;
    }

    public void setLblNumberBX(JLabel lblNumberBX) {
        this.lblNumberBX = lblNumberBX;
    }

    public JLabel getLblNumberCX() {
        return lblNumberCX;
    }

    public void setLblNumberCX(JLabel lblNumberCX) {
        this.lblNumberCX = lblNumberCX;
    }

    public JLabel getLblNumberDX() {
        return lblNumberDX;
    }

    public void setLblNumberDX(JLabel lblNumberDX) {
        this.lblNumberDX = lblNumberDX;
    }

    public JLabel getLblNumberIR() {
        return lblNumberIR;
    }

    public void setLblNumberIR(JLabel lblNumberIR) {
        this.lblNumberIR = lblNumberIR;
    }

    public JLabel getLblNumberPC() {
        return lblNumberPC;
    }

    public void setLblNumberPC(JLabel lblNumberPC) {
        this.lblNumberPC = lblNumberPC;
    }

    public FileManager getFileManager() {
        return fileManager;
    }

    public void setFileManager(FileManager fileManager) {
        this.fileManager = fileManager;
    }

    
    
    private void nextInstructionBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextInstructionBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nextInstructionBtn1ActionPerformed

    private void loadFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileBtnActionPerformed
        if (evt.getSource() == loadFileBtn) {
            this.cleanTable();

            String filePath = fileManager.selectFile(this);
            fileManager.loadOperations();
            fileManager.loadDataRegisters();
            ArrayList<MemoryRegister> instructionSet = fileManager.loadFileInstructions(filePath);

            if (instructionSet.size() > 90){
                JOptionPane.showMessageDialog (null, "Hay m치s de 90 instrucciones por lo que no hay suficiente memoria para correrlas.", "Error: No hay suficiente memoria", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else if (instructionSet != null){
                Memory memory = new Memory(instructionSet.size());
                System.out.println("prueba1");
                memory.allocateMemory(instructionSet);
                CPU cpu = new CPU(memory);
                this.getController().setCpu(cpu);
                this.setCurrentAddress(this.controller.getCpu().getMemory().getAllocationStartIndex());

                MemoryRegister currentInstruction = this.getFileManager().getInstructions().get(this.getRowCount());
                this.getController().getCpu().setInstructionRegister(currentInstruction.getAsmInstructionString());
                this.getController().getCpu().setProgramCounter(this.getRowCount());

                this.getController().executeInstruction(currentInstruction.getOp(),currentInstruction.getRegister(),currentInstruction.getValue());
                this.updateTable(this.fileManager.getInstructions(),this.getRowCount());
            }

        }
    }//GEN-LAST:event_loadFileBtnActionPerformed

    private void cleanTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanTableBtnActionPerformed
        if (this.getTblCode().getValueAt(0, 0) == "" || this.getTblCode().getValueAt(0, 0) == " "){
            JOptionPane.showMessageDialog (null, "No queda nada por limpiar", "Error: Archivo ya fue limpiado", JOptionPane.ERROR_MESSAGE);
        }
        else
        this.cleanTable();
    }//GEN-LAST:event_cleanTableBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void nextInstructionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextInstructionBtnActionPerformed
        if (this.getController().getCpu() == null){
            JOptionPane.showMessageDialog (null, "Por favor cargue un archivo", "Error: Archivo no cargado", JOptionPane.ERROR_MESSAGE);
        }
        else if (this.getRowCount() >= this.fileManager.getInstructions().size()){
            JOptionPane.showMessageDialog (null, "No quedan m치s instrucciones que cargar.", "Error: Final del archivo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            MemoryRegister currentInstruction = this.getFileManager().getInstructions().get(this.getRowCount());
            this.getController().getCpu().setInstructionRegister(currentInstruction.getAsmInstructionString());
            this.getController().executeInstruction(currentInstruction.getOp(),currentInstruction.getRegister(),currentInstruction.getValue());
            this.updateTable(this.fileManager.getInstructions(), this.getRowCount());
            this.getController().getCpu().setProgramCounter(this.getRowCount());
        }
    }//GEN-LAST:event_nextInstructionBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniPC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Lbl_memoria;
    private javax.swing.JLabel Lbl_registros;
    private javax.swing.JScrollPane Pnl_Memoria;
    private javax.swing.JPanel Pnl_Menu;
    private javax.swing.JPanel Pnl_Registros;
    private javax.swing.JButton cleanTableBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblAC;
    private javax.swing.JLabel lblAX;
    private javax.swing.JLabel lblBX;
    private javax.swing.JLabel lblCX;
    private javax.swing.JLabel lblDX;
    private javax.swing.JLabel lblIR;
    private javax.swing.JLabel lblNumberAC;
    private javax.swing.JLabel lblNumberAX;
    private javax.swing.JLabel lblNumberBX;
    private javax.swing.JLabel lblNumberCX;
    private javax.swing.JLabel lblNumberDX;
    private javax.swing.JLabel lblNumberIR;
    private javax.swing.JLabel lblNumberPC;
    private javax.swing.JLabel lblPC;
    private javax.swing.JButton loadFileBtn;
    private javax.swing.JButton nextInstructionBtn;
    private javax.swing.JButton nextInstructionBtn1;
    private javax.swing.JTable tblCode;
    // End of variables declaration//GEN-END:variables
}
